// --------------------
// Background Utilities
// --------------------

.background-color-green {
  background-color: color('green');
}

.background-color-green-light {
  background-color: color('green-light');
}

.background-color-green-lighter {
  background-color: color('green-lighter');
}

.background-color-green-lightest {
  background-color: color('green-lightest');
}

.background-color-green-dark {
  background-color: color('green-dark');
}

.background-color-blue {
  background-color: color('blue');
}

.background-color-pink {
  background-color: color('pink');
}

// --------------------
// Border Utilities
// --------------------

.border-green {
  border: 2px solid color('green');
}

.border-green-light {
  border: 2px solid color('green-light');
}

.border-green-lighter {
  border: 2px solid color('green-lighter');
}

.border-green-lightest {
  border: 2px solid color('green-lightest');
}

.border-green-dark {
  border: 2px solid color('green-dark');
}

// --------------------
// Border Radius Utilities
// --------------------

.border-radius-50 {
  border-radius: 50%;
}

// --------------------
// Color Utilities
// --------------------

.color-black {
  color: color('black') !important;
}
.color-white {
  color: color('white') !important;
}

.color-gray-dark {
  color: color('gray-dark') !important;
}
.color-gray {
  color: color('gray') !important;
}
.color-gray-light {
  color: color('gray-light') !important;
}

.color-green-dark {
  color: color('green-dark') !important;
}
.color-green {
  color: color('green') !important;
}
.color-green-light {
  color: color('green-light') !important;
}
.color-green-lighter {
  color: color('green-lighter') !important;
}
.color-green-lighest {
  color: color('green-lightest') !important;
}

.color-blue {
  color: color('blue') !important;
}

.color-primary {
  color: color('primary') !important;
}
.color-secondary {
  color: color('secondary') !important;
}

// --------------------
// Display Utilities
// --------------------

@mixin display_utilities() {
  @each $key, $value in $breakpoints {
    @media screen and (min-width: $value) {
      .display-#{$key}-none {
        display: none !important;
      }

      .display-#{$key}-block {
        display: block !important;
      }

      .display-#{$key}-flex {
        display: flex !important;
      }

      .display-#{$key}-initial {
        display: initial !important;
      }
    }
  }
}

@include display_utilities();

// --------------------
// Flex Utilities
// --------------------

@mixin flex_utilities() {
  .align-items {
    &-center {
      align-items: center;
    }
    &-flex-start {
      align-items: flex-start;
    }
    &-flex-end {
      align-items: flex-end;
    }
  }

  .flex-direction {
    &-column {
      flex-direction: column;
    }
    &-column-reverse {
      flex-direction: column-reverse;
    }
    &-row {
      flex-direction: row;
    }
    &-row-reverse {
      flex-direction: row-reverse;
    }
  }

  .flex-w {
    &-no-wrap {
      flex-wrap: nowrap;
    }
    &-wrap {
      flex-wrap: wrap;
    }
    &-wrap-reverse {
      flex-wrap: wrap-reverse;
    }
  }

  .justify-content {
    &-center {
      justify-content: center;
    }
    &-flex-end {
      justify-content: flex-end;
    }
    &-flex-start {
      justify-content: flex-start;
    }
    &-space-around {
      justify-content: space-around;
    }
    &-space-between {
      justify-content: space-between;
    }
  }

  @each $key, $value in $breakpoints {
    @media screen and (min-width: $value) {
      .align-items-#{$key} {
        &-center {
          align-items: center;
        }
        &-flex-start {
          align-items: flex-start;
        }
        &-flex-end {
          align-items: flex-end;
        }
      }

      .flex-direction-#{$key} {
        &-column {
          flex-direction: column;
        }
        &-column-reverse {
          flex-direction: column-reverse;
        }
        &-row {
          flex-direction: row;
        }
        &-row-reverse {
          flex-direction: row-reverse;
        }
      }

      .flex-w-#{$key} {
        &-no-wrap {
          flex-wrap: nowrap;
        }
        &-wrap {
          flex-wrap: wrap;
        }
        &-wrap-reverse {
          flex-wrap: wrap-reverse;
        }
      }

      .justify-content-#{$key} {
        &-center {
          justify-content: center;
        }
        &-flex-end {
          justify-content: flex-end;
        }
        &-flex-start {
          justify-content: flex-start;
        }
        &-space-around {
          justify-content: space-around;
        }
        &-space-between {
          justify-content: space-between;
        }
      }
    }
  }
}

@include flex_utilities();

@mixin flex_utilities() {
  @each $key, $value in $breakpoints {
    @media screen and (min-width: $value) {
    }
  }
}

@include flex_utilities();

// --------------------
// Margin Utilities
// --------------------

.margin-0 {
  margin: 0 !important;
}
.margin-0-auto {
  margin: 0 auto !important;
}

@mixin margin_utilities($multiplier) {
  $directions: (
    'b': 'bottom',
    'l': 'left',
    'r': 'right',
    't': 'top'
  );

  @for $i from 0 through $multiplier {
    @each $key, $value in $directions {
      .margin-#{$key}-#{$i} {
        margin-#{$value}: $base-unit * $i !important;
      }
    }
  }

  @each $breakpoint-key, $breakpoint-value in $breakpoints {
    @media screen and (min-width: #{$breakpoint-value}) {
      @for $i from 0 through $multiplier {
        @each $direction-key, $direction-value in $directions {
          .margin-#{$direction-key}-#{$breakpoint-key}-#{$i} {
            margin-#{$direction-value}: $base-unit * $i !important;
          }
        }
      }
    }
  }
}

@include margin_utilities(10);

// --------------------
// Max Width Utilities
// --------------------

@mixin max_width_utilities($percent-step) {
  $steps: 100 / $percent-step;

  @for $i from 1 through $steps {
    .max-width-#{$i * $percent-step} {
      max-width: #{($i * $percent-step) + '%'} !important;
    }
  }

  @each $key, $value in $breakpoints {
    @media screen and (min-width: #{$value}) {
      @for $i from 1 through $steps {
        .max-width-#{$key}-#{($i * $percent-step)} {
          max-width: #{($i * $percent-step) + '%'} !important;
        }
      }
    }
  }
}

@include max_width_utilities(10);

// --------------------
// Order Utilities
// --------------------

@mixin order_utilities() {
  @each $key, $value in $breakpoints {
    @for $i from 1 through 12 {
      @media screen and (min-width: #{$value}) {
        .order-#{$key}-#{$i} {
          order: #{$i};
        }
      }
    }
  }
}

@include order_utilities();

// --------------------
// Padding Utilities
// --------------------

.padding-0 {
  padding: 0 !important;
}

@mixin padding_utilities($multiplier) {
  $directions: (
    'b': 'bottom',
    'l': 'left',
    'r': 'right',
    't': 'top'
  );

  @for $i from 0 through $multiplier {
    @each $key, $value in $directions {
      .padding-#{$key}-#{$i} {
        padding-#{$value}: $base-unit * $i !important;
      }
    }
  }

  @each $breakpoint-key, $breakpoint-value in $breakpoints {
    @media screen and (min-width: #{$breakpoint-value}) {
      @for $i from 0 through $multiplier {
        @each $direction-key, $direction-value in $directions {
          .padding-#{$direction-key}-#{$breakpoint-key}-#{$i} {
            padding-#{$direction-value}: $base-unit * $i !important;
          }
        }
      }
    }
  }
}

@include padding_utilities(10);

// --------------------
// Width Utilities
// --------------------

@mixin width_utilities($percent-step) {
  $steps: 100 / $percent-step;

  @for $i from 1 through $steps {
    .width-#{$i * $percent-step} {
      width: #{($i * $percent-step) + '%'} !important;
    }
  }
}

@include width_utilities(10);

// --------------------
// Text Utilities
// --------------------

.text-decoration-underline {
  text-decoration: underline !important;
}

.text-decoration-none {
  text-decoration: none !important;
}

.text-align-left {
  text-align: left;
}
.text-align-center {
  text-align: center;
}
.text-align-right {
  text-align: right;
}

.text-highlight {
  display: inline;
  position: relative;

  &::before {
    background-color: color('green-light');
    content: '';
    height: 24px;
    left: 16px;
    position: absolute;
    top: 16px;
    width: 100%;
    z-index: -1;

    @media #{$mq-min-lg} {
      height: 32px;
      left: 24px;
      top: 32px;
    }
  }
}

.text-transform-upper {
  text-transform: uppercase;
}

.font-size-xs {
  font-size: $font-size-xs;
}
.font-size-sm {
  font-size: $font-size-sm;
}
.font-size-md {
  font-size: $font-size-md;
}
.font-size-lg {
  font-size: $font-size-lg;
}
.font-size-xl {
  font-size: $font-size-xl;
}

.font-family-serif {
  font-family: $font-family-serif !important;
}
.font-family-sans-serif {
  font-family: $font-family-sans-serif !important;
}

.font-family-primary {
  font-family: $font-family-primary !important;
}
.font-family-secondary {
  font-family: $font-family-secondary !important;
}

.font-weight-light {
  font-weight: $font-weight-light !important;
}
.font-weight-normal {
  font-weight: $font-weight-normal !important;
}
.font-weight-bold {
  font-weight: $font-weight-bold !important;
}
